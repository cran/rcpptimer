// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rcpptimer.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fibonacci
std::vector<int> fibonacci(std::vector<int> n);
RcppExport SEXP _rcpptimer_fibonacci(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci(n));
    return rcpp_result_gen;
END_RCPP
}
// fibonacci_omp
std::vector<int> fibonacci_omp(std::vector<int> n);
RcppExport SEXP _rcpptimer_fibonacci_omp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci_omp(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcpptimer_fibonacci", (DL_FUNC) &_rcpptimer_fibonacci, 1},
    {"_rcpptimer_fibonacci_omp", (DL_FUNC) &_rcpptimer_fibonacci_omp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcpptimer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
