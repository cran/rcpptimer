// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rcpptimer.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fibonacci
std::vector<long int> fibonacci(std::vector<long int> n);
RcppExport SEXP _rcpptimer_fibonacci(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<long int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci(n));
    return rcpp_result_gen;
END_RCPP
}
// fibonacci_omp
std::vector<long int> fibonacci_omp(std::vector<long int> n);
RcppExport SEXP _rcpptimer_fibonacci_omp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<long int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci_omp(n));
    return rcpp_result_gen;
END_RCPP
}
// test_default
void test_default();
RcppExport SEXP _rcpptimer_test_default() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_default();
    return R_NilValue;
END_RCPP
}
// test_update
List test_update();
RcppExport SEXP _rcpptimer_test_update() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_update());
    return rcpp_result_gen;
END_RCPP
}
// test_reset
List test_reset();
RcppExport SEXP _rcpptimer_test_reset() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_reset());
    return rcpp_result_gen;
END_RCPP
}
// test_misc
DataFrame test_misc(const bool tic, const bool toc, const bool extra_toc, const bool verbose, const bool autoreturn, const bool scoped_timer);
RcppExport SEXP _rcpptimer_test_misc(SEXP ticSEXP, SEXP tocSEXP, SEXP extra_tocSEXP, SEXP verboseSEXP, SEXP autoreturnSEXP, SEXP scoped_timerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type tic(ticSEXP);
    Rcpp::traits::input_parameter< const bool >::type toc(tocSEXP);
    Rcpp::traits::input_parameter< const bool >::type extra_toc(extra_tocSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type autoreturn(autoreturnSEXP);
    Rcpp::traits::input_parameter< const bool >::type scoped_timer(scoped_timerSEXP);
    rcpp_result_gen = Rcpp::wrap(test_misc(tic, toc, extra_toc, verbose, autoreturn, scoped_timer));
    return rcpp_result_gen;
END_RCPP
}
// test_stats
Rcpp::List test_stats(unsigned int N, unsigned int K, const bool missing_tic, const bool missing_toc, const bool extra_toc);
RcppExport SEXP _rcpptimer_test_stats(SEXP NSEXP, SEXP KSEXP, SEXP missing_ticSEXP, SEXP missing_tocSEXP, SEXP extra_tocSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool >::type missing_tic(missing_ticSEXP);
    Rcpp::traits::input_parameter< const bool >::type missing_toc(missing_tocSEXP);
    Rcpp::traits::input_parameter< const bool >::type extra_toc(extra_tocSEXP);
    rcpp_result_gen = Rcpp::wrap(test_stats(N, K, missing_tic, missing_toc, extra_toc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcpptimer_fibonacci", (DL_FUNC) &_rcpptimer_fibonacci, 1},
    {"_rcpptimer_fibonacci_omp", (DL_FUNC) &_rcpptimer_fibonacci_omp, 1},
    {"_rcpptimer_test_default", (DL_FUNC) &_rcpptimer_test_default, 0},
    {"_rcpptimer_test_update", (DL_FUNC) &_rcpptimer_test_update, 0},
    {"_rcpptimer_test_reset", (DL_FUNC) &_rcpptimer_test_reset, 0},
    {"_rcpptimer_test_misc", (DL_FUNC) &_rcpptimer_test_misc, 6},
    {"_rcpptimer_test_stats", (DL_FUNC) &_rcpptimer_test_stats, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcpptimer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
